#include <cstdio>
#include <cstdarg>
#include "logging_defs.hh"

namespace logging
{
    /**
     * @brief Initializer for STDIO logging
     * @details Does nothing
     */
    void init_logging()
    { 
        write_log<DEBUG>("STDIO logging Initialized with log level %d",
                         runtime_log_level);
    }

    /**
     * @brief Sets the logging level
     * @param L The new logging level
     */
    void set_logging_level(LogLevel L)
    {
        runtime_log_level = static_cast<int>(L);
    }

    /**
     * @brief Implementation for stdio logging
     * @param L The log level to log 
     * @param format The format string (printf style)
     * @param args The log arguments (values)
     */
    void logging_impl_function(LogLevel L, const char * format, va_list args)
    {
#ifdef LOGGING_COLORED
        /* NOTE avoid using designated initializers when using gcc */

        /**< Log/level tags to use when color is enabled 
         * This needs revisited -ac XXX TODO
         */
        static const char * level_strings[] = {
            nullptr,
            nullptr,
            "\033[1;0;91m CRIT    \033[0m\033[91m >>>\033[0m ",
            nullptr,
            "\033[1;0;93m WARNING \033[0m\033[93m >>>\033[0m ",
            nullptr,
            "\033[1;0;92m INFO    \033[0m\033[92m >>>\033[0m ",
            "\033[1;0;94m DEBUG   \033[0m\033[94m >>>\033[0m "
        };
#else
        /**< Log/level tags to use when color is disabled */
        static const char * level_strings[] = {
            nullptr,
            nullptr,
            "[CRIT   ] ",
            nullptr,
            "[WARNING] ",
            nullptr,
            "[INFO   ] ",
            "[DEBUG  ] ",
        };

#endif /* end LOGGING_COLORED */

        std::fprintf(stderr, "%s", level_strings[L]);
        std::vfprintf(stderr, format, args);
        
        auto l = std::strlen(format);
        
        /* revisit this -ac XXX TODO */
        if (l > 0 && format[l-1] != '\n')
        {
            /* handle automatic newlines as syslog does */
            std::fprintf(stderr,"\n");
        }
    }
}

// vim: ft=cpp
