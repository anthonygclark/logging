extern "C"
{
#include <sys/syslog.h>
}

#include <mutex>
#include <cstdarg>

#include "logging/logging_defs.hh"

namespace NAMESPACE
{
    /**< Application tag */
    static const char * logging_identifier = xstr(LOGGING_IDENTIFIER);

    /**
     * @brief Syslog initialization
     * @details Writes to stderr and syslog
     */
    void init_logging()
    {
        static std::once_flag log_initialized;

        std::call_once(log_initialized, 
                       [] {
                            ::openlog(logging_identifier,
                                      LOG_PERROR | 
                                      LOG_NOWAIT | 
                                      LOG_NDELAY | 
                                      LOG_PID, 0);

                            ::setlogmask(LOG_UPTO(runtime_log_level));
                            write_log<DEBUG>("Syslog Initialized with log level %d for module '%s'",
                                             runtime_log_level, logging_identifier);
                       });
    }

    /**
     * @brief Sets the logging level for syslog
     * @note Does not effect syslog if compiled with LOGGING_COMPILETIME
     * @param L The log level to set
     */
    void set_logging_level(LogLevel L)
    {
#if ! defined (LOGGING_COMPILETIME)
        (void) ::setlogmask(LOG_UPTO(static_cast<int>(L)));
#endif
        runtime_log_level = static_cast<int>(L);
    }

    /**
     * @brief Implementation for syslog
     * @param L The log level
     * @param format String format
     * @param args Format args
     */
    void logging_impl_function(LogLevel L, const char * format, va_list args)
    {
        ::vsyslog(L, format, args);
    }
}

#undef xstr
#undef str

// vim: ft=cpp
